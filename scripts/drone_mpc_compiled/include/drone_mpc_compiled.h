/*
drone_mpc_compiled : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v4.2.1 on Friday, April 30, 2021 at 6:20:53 PM */
#ifndef drone_mpc_compiled_H
#define drone_mpc_compiled_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double drone_mpc_compiled_float;
typedef double drone_mpc_compiled_callback_float;

typedef double drone_mpc_compiledinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_drone_mpc_compiled
#define MISRA_C_drone_mpc_compiled (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_drone_mpc_compiled
#define RESTRICT_CODE_drone_mpc_compiled (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_drone_mpc_compiled
#define SET_PRINTLEVEL_drone_mpc_compiled    (0)
#endif

/* timing */
#ifndef SET_TIMING_drone_mpc_compiled
#define SET_TIMING_drone_mpc_compiled    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_drone_mpc_compiled			(1000)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_drone_mpc_compiled		(drone_mpc_compiled_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_drone_mpc_compiled	(1000) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_drone_mpc_compiled			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_drone_mpc_compiled		(drone_mpc_compiled_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_drone_mpc_compiled		(drone_mpc_compiled_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_drone_mpc_compiled	(drone_mpc_compiled_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_drone_mpc_compiled	(drone_mpc_compiled_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_drone_mpc_compiled      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_drone_mpc_compiled (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_drone_mpc_compiled   (2)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_drone_mpc_compiled  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_drone_mpc_compiled   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_drone_mpc_compiled  (-6)

/* no progress in method possible */
#define NOPROGRESS_drone_mpc_compiled   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_drone_mpc_compiled   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_drone_mpc_compiled   (-12)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_drone_mpc_compiled  (-100)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)



/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 55 */
    drone_mpc_compiled_float x0[55];

    /* vector of size 7 */
    drone_mpc_compiled_float xinit[7];

    /* vector of size 30 */
    drone_mpc_compiled_float all_parameters[30];


} drone_mpc_compiled_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 11 */
    drone_mpc_compiled_float x1[11];

    /* vector of size 11 */
    drone_mpc_compiled_float x2[11];

    /* vector of size 11 */
    drone_mpc_compiled_float x3[11];

    /* vector of size 11 */
    drone_mpc_compiled_float x4[11];

    /* vector of size 11 */
    drone_mpc_compiled_float x5[11];


} drone_mpc_compiled_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    drone_mpc_compiled_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    drone_mpc_compiled_float res_ineq;

	/* norm of stationarity condition */
    drone_mpc_compiled_float rsnorm;

	/* max of all complementarity violations */
    drone_mpc_compiled_float rcompnorm;

    /* primal objective */
    drone_mpc_compiled_float pobj;	
	
    /* dual objective */
    drone_mpc_compiled_float dobj;	

    /* duality gap := pobj - dobj */
    drone_mpc_compiled_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    drone_mpc_compiled_float rdgap;		

    /* duality measure */
    drone_mpc_compiled_float mu;

	/* duality measure (after affine step) */
    drone_mpc_compiled_float mu_aff;
	
    /* centering parameter */
    drone_mpc_compiled_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    drone_mpc_compiled_float step_aff;
    
    /* step size (combined direction) */
    drone_mpc_compiled_float step_cc;    

	/* solvertime */
	drone_mpc_compiled_float solvetime;   

	/* time spent in function evaluations */
	drone_mpc_compiled_float fevalstime;  


} drone_mpc_compiled_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Friday, April 30, 2021 6:20:54 PM */
/* User License expires on: (UTC) Wednesday, October 20, 2021 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Wednesday, October 20, 2021 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 079343bf-3436-47b8-9c39-119819112efd */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*drone_mpc_compiled_extfunc)(drone_mpc_compiled_float* x, drone_mpc_compiled_float* y, drone_mpc_compiled_float* lambda, drone_mpc_compiled_float* params, drone_mpc_compiled_float* pobj, drone_mpc_compiled_float* g, drone_mpc_compiled_float* c, drone_mpc_compiled_float* Jeq, drone_mpc_compiled_float* h, drone_mpc_compiled_float* Jineq, drone_mpc_compiled_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default drone_mpc_compiled_solve(drone_mpc_compiled_params *params, drone_mpc_compiled_output *output, drone_mpc_compiled_info *info, FILE *fs, drone_mpc_compiled_extfunc evalextfunctions_drone_mpc_compiled);	











#ifdef __cplusplus
}
#endif

#endif
